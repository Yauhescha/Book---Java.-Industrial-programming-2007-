package main.java.chapter.chapter07.variantB;

public class Main {

	public static void main(String[] args) {
		System.out.println("1. В тексте нет слов, начинающихся одинаковыми буквами. Напечатать слова текста в таком порядке, чтобы последняя буква каждого слова совпадала с первой буквой последующего слова. Если все слова нельзя напечатать в таком порядке, найти такую цепочку, состоящую из наибольшего количества слов.");
		System.out.println("2. Найти наибольшее количество предложений текста, в которых есть одинаковые слова.");
		System.out.println("3. Найти такое слово в первом предложении, которого нет ни в одном из остальных предложений.");
		System.out.println("4. Во всех вопросительных предложениях текста найти и напечатать без повторений слова заданной длины.");
		System.out.println("5. В каждом предложении текста поменять местами первое слово с по-следним, не изменяя длины предложения.");
		System.out.println("6. В предложении из n слов первое слово поставить на место второго, второе – на место третьего, и т.д., (n-1)-е слово – на место n-го, n-е слово поставить на место первого. В исходном и преобразованном предложениях между словами должны быть или один пробел, или знак препинания и один пробел.");
		System.out.println("7. Текст шифруется по следующему правилу: из исходного текста выби-рается 1, 4, 7, 10-й и т.д. (до конца текста) символы, затем 2, 5, 8, 11-й и т.д. (до конца текста) символы, затем 3, 6, 9, 12-й и т.д. Зашифровать заданный текст.");
		System.out.println("8. На основании правила кодирования, описанного в предыдущем приме-ре, расшифровать заданный набор символов.");
		System.out.println("9. Напечатать слова русского текста в алфавитном порядке по первой букве. Слова, начинающиеся с новой буквы, печатать с красной строки. ");
		System.out.println("10. Рассортировать слова русского текста по возрастанию доли гласных букв (отношение количества гласных к общему количеству букв в слове). ");
		System.out.println("11. Слова английского текста, начинающиеся с гласных букв, рассортировать в алфавитном порядке по первой согласной букве слова.");
		System.out.println("12. Все слова английского текста рассортировать по возрастанию количества заданной буквы в слове. Слова с одинаковым количеством распо-ложить в алфавитном порядке.");
		System.out.println("13. Ввести текст и список слов. Для каждого слова из заданного списка найти, сколько раз оно встречается в тексте, и рассортировать слова по убыванию количества вхождений.");
		System.out.println("14. Все слова текста рассортировать в порядке убывания их длин, при этом все слова одинаковой длины рассортировать в порядке возрастания в них количества гласных букв.");
		System.out.println("15. В тексте исключить подстроку максимальной длины, начинающуюся и заканчивающуюся заданными символами.");
		System.out.println("16. Заменить все одинаковые рядом стоящие символы в тексте одним сим-волом.");
		System.out.println("17. Вывести в заданном тексте все слова, расположив их в алфавитном порядке.");
		System.out.println("18. Подсчитать, сколько слов в заданном тексте начинается с прописной буквы.");
		System.out.println("19. Подсчитать, сколько раз заданное слово входит в текст.");
		System.out.println("20. Преобразовать каждое слово в тексте, удалив из него все последующие (предыдущие) вхождения первой (последней) буквы этого слова.");
		System.out.println("21. Вычеркнуть из текста минимальное количество предложений, так чтобы у любых двух оставшихся предложений было хотя бы одно общее слово.");
		System.out.println("22. Текст из n2 символов шифруется по следующему правилу:");
		System.out.println("	– все символы текста записываются в квадратную таблицу размерности");
		System.out.println("	n в порядке слева направо, сверху вниз;");
		System.out.println("	– таблица поворачивается на 900 по часовой стрелке;");
		System.out.println("	– 1-я строка таблицы меняется местами с последней, 2-я – с предпо-следней и т.д.");
		System.out.println("	– 1-й столбец таблицы меняется местами со 2-м, 3-й – с 4-м и т.д.");
		System.out.println("	– зашифрованный текст получается в результате обхода результирую-щей таблицы по спирали по часовой стрелке, начиная с левого верхнего угла.");
		System.out.println("");
		System.out.println("Зашифровать текст по указанному правилу.");
		System.out.println("23. На основании правила кодирования, описанного в предыдущем приме-ре, расшифровать заданный набор символов.");
		System.out.println("24. Исключить из текста подстроку максимальной длины, начинающуюся и заканчивающуюся одним и тем же символом.");
		System.out.println("25. Осуществить сжатие английского текста, заменив каждую группу из двух или более рядом стоящих символов, на один символ, за которым следует количество его вхождений в группу. К примеру, строка hellowoooorld должна сжиматься в hel2owo4rld.");
		System.out.println("26. Распаковать текст, сжатый по правилу из предыдущего задания.");
		System.out.println("27. Определить, удовлетворяет ли имя файла маске. Маска может содержать символы ‘?’ (произвольный символ) и ‘*’ (произвольное количе-ство произвольных символов).");
		System.out.println("28. Отсортировать слова в тексте по убыванию количества вхождений за-данного символа, а в случае равенства – по алфавиту. Словом считать максимальную группу подряд стоящих не пробельных символов.");
		System.out.println("29. Буквенная запись телефонных номеров основана на том, что каждой цифре соответствует несколько английских букв: 2 – ABC, 3 – DEF, 4 – GHI, 5 – JKL, 6 – MNO, 7 – PQRS, 8 – TUV, 9 – WXYZ. Написать про-грамму, которая находит в заданном телефонном номере подстроку максимальной длины, соответствующую слову из словаря.");
		System.out.println("30. В заданном тексте найти подстроку максимальной длины, являющуюся палиндромом, т.е. читающуюся слева направо и справа налево одина-ково.");
		System.out.println("31. Осуществить форматирование заданного текста с выравниванием по левому краю. Программа должна разбивать текст на строки с длиной, не превосходящей заданного количества символов. Если очередное слово не помещается в текущей строке, его необходимо переносить на следующую.");
		System.out.println("32. Изменить программу из предыдущего примера так, чтобы она осу-ществляла форматирование с выравниванием по обоим краям. Для это-го добавить дополнительные пробелы между словами.");
		System.out.println("33. Добавить к программе из предыдущего примера возможность переноса слов по слогам. Предполагается, что есть доступ к словарю, в котором для каждого слова указано, как оно разбивается на слоги.");
		System.out.println("34. Пусть массив содержит миллион символов и необходимо сформировать из них строку путем конкатенации. Определить время работы кода. Как можно ускорить процесс, используя класс StringBuffer?");
		System.out.println("35. Алгоритм Барроуза – Уиллера для сжатия текстов основывается на пре-образовании Барроуза – Уиллера. Оно производится следующим обра-зом: для слова рассматриваются все его циклические сдвиги, которые затем сортируются в алфавитном порядке, после чего формируется сло-во из последних символов отсортированных циклических сдвигов. К примеру, для слова JAVA циклические сдвиги – это JAVA, AVAJ, VAJA, AJAV. После сортировки по алфавиту получим AJAV, AVAJ, JAVA, VAJA. Значит, результат преобразования – слово VJAA. Реализо-вать программно преобразование Барроуза – Уиллера для данного слова.");
		System.out.println("36. Восстановить слово по его преобразованию Барроуза – Уиллера. К примеру, получив на вход VJAA, в результате работы программа долж-на выдать слово JAVA.");	}

}
